use super::{
    audio_model::Audio,
    user_model::User,
    chat_model::Chat,
    photo_size_model::PhotoSize,
    contact_model::Contact,
    animation_model::Animation,
    document_model::Document,
    video_model::Video,
    video_note_model::VideoNote,
    voice_model::Voice,
    sticker_model::Sticker,
};
use serde::{ Deserialize, Serialize };
use utility_types::omit;

#[omit(ReplyToMessage, [reply_to_message, pinned_message], [Deserialize, Serialize])]
#[derive(Deserialize, Serialize)]
pub struct Message {
    message_id: i32,
    message_thread_id: Option<i32>,
    from: Option<User>,
    sender_chat: Option<Chat>,
    date: i32, // in UNIX  time
    chat: Chat,
    forward_from: Option<User>,
    forward_from_chat: Option<Chat>,
    forward_from_message_id: Option<i32>,
    forward_signature: Option<String>,
    forward_sender_name: Option<String>,
    forward_date: Option<i32>,
    is_topic_message: Option<bool>,
    is_automatic_forward: Option<bool>,
    reply_to_message: Option<ReplyToMessage>,
    via_bot: Option<User>,
    edit_date: Option<i32>,
    has_protected_content: Option<bool>,
    media_group_id: Option<String>,
    author_signature: Option<String>,
    text: Option<String>,
    animation: Option<Animation>,
    audio: Option<Audio>,
    document: Option<Document>,
    photo: Option<Vec<PhotoSize>>,
    sticker: Option<Sticker>,
    video: Option<Video>,
    video_note: Option<VideoNote>,
    voice: Option<Voice>,
    caption: Option<String>,
    has_media_spoiler: Option<bool>,
    contact: Option<Contact>,
    new_chat_members: Option<Vec<User>>,
    left_chat_member: Option<User>,
    new_chat_title: Option<String>,
    new_chat_photo: Option<Vec<PhotoSize>>,
    delete_chat_photo: Option<bool>,
    group_chat_created: Option<bool>,
    supergroup_chat_created: Option<bool>,
    channel_chat_created: Option<bool>,
    migrate_to_chat_id: Option<i32>,
    migrate_from_chat_id: Option<i32>,
    pinned_message: Option<ReplyToMessage>,
    connected_website: Option<String>,
}
